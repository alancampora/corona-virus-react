{"version":3,"sources":["components/layout/styled.js","components/content/styled.js","context/index.js","hooks/index.js","components/content/index.jsx","helpers/index.js","components/header/styled.js","components/search/styled.js","components/search/index.jsx","components/header/index.jsx","components/layout/index.jsx","components/country/index.jsx","App.js","serviceWorker.js","index.js"],"names":["StyledHeader","styled","div","StyledContent","StyledWrapper","StyledCard","StyledCardName","h2","StyledInformation","p","StyledTotalsWrapper","StyledTotalCard","props","backgroundColor","reducer","state","type","payload","console","log","countries","search","initialState","StateContext","React","createContext","StateProvider","useReducer","dispatch","Provider","value","children","getTotal","data","prop","reduce","acum","country","a","fetch","json","countriesData","features","map","f","attributes","filter","length","Country_Region","toLowerCase","name","coordinates","Lat","Long_","confirmed","Confirmed","deaths","Deaths","recovered","Recovered","totals","useSearch","useContext","setSearch","useCoronaVirusData","useState","fetchedCountries","setFetchedCountries","fetchedTotals","setFetchedTotals","useEffect","getData","then","onCardClick","id","path","navigate","Content","onClick","flag","StyledTitle","h1","StyledInput","input","Search","placeholder","onChange","element","target","Header","Index","Country","countryId","App","basepath","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a827e434.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const StyledHeader = styled.div`\n  text-align: center;\n`;\nexport const StyledContent = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 60rem;\n`;\n","import styled from 'styled-components';\n\nexport const StyledWrapper = styled.div` \n    display: flex;\n    flex-wrap: wrap;\n    -webkit-box-pack: center;\n    justify-content: center;\n`\n\nexport const StyledCard = styled.div`\n    width: 25%;\n    padding: 10px;\n    margin: 10px;\n    background-color:#edcaca4d;\n`\n\nexport const StyledCardName = styled.h2`\n  text-align: center;\n`\n\nexport const StyledInformation = styled.p`\n  text-align: center;\n  font-size: 1.5em;\n`\n\nexport const StyledTotalsWrapper = styled.p`\n    display: flex;\n    flex-wrap: wrap;\n    -webkit-box-pack: center;\n    justify-content: center;\n`\n\nexport const StyledTotalCard = styled.div`\n    border-radius: 10px;\n    background: ${props => props.backgroundColor};\n    text-align: center;\n    padding: 10px;\n    margin: 10px;\n    width: 25%;\n    word-break: break-word;\n`;\n\n\nexport const StyledFilters = styled.div`\n  padding: 1rem;\n  max-width: 250px;\n`\n","import React, { useReducer } from 'react';\n\nlet reducer = (state, {type, payload}) => {\n  console.log({payload,type});\n\tswitch (type) {\n\t\tcase 'SET_COUNTRIES':\n\t\t\treturn { ...state, countries: payload.countries };\n    case 'SET_SEARCH':\n\t\t\treturn { ...state, search: payload.search };\n\t\tdefault:\n\t\t\treturn;\n\t}\n};\n\nconst initialState = { countries: [] , search: ''};\n\nconst StateContext = React.createContext(initialState);\n\nfunction StateProvider(props) {\n\tconst [state, dispatch] = useReducer(reducer, initialState);\n\treturn (\n\t\t<StateContext.Provider value={{ state, dispatch }}>\n\t\t\t{props.children}\n\t\t</StateContext.Provider>\n\t);\n}\nexport { StateContext, StateProvider };\n","import { useContext } from 'react';\nimport { StateContext } from '../context';\n\nexport function getTotal(data, prop) {\n\treturn data.reduce((acum, country) => {\n\t\tacum += country[prop];\n\t\treturn acum;\n\t}, 0);\n}\n\nexport async function getData(search) {\n\tconst data = await fetch(\n\t\t'https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/ncov_cases/FeatureServer/2/query?f=json&where=Confirmed%20%3E%200&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=Confirmed%20desc&resultOffset=0&resultRecordCount=200&cacheHint=true',\n\t);\n\tconst countriesData = await data.json();\n\tconst countries = countriesData.features\n\t\t.map(f => f.attributes)\n\t\t.filter(country => search.length ? country.Country_Region.toLowerCase() === search.toLowerCase(): true)\n\t\t.map(f => ({\n\t\t\tname: f.Country_Region,\n\t\t\tcoordinates: [f.Lat, f.Long_],\n\t\t\tconfirmed: f.Confirmed,\n\t\t\tdeaths: f.Deaths,\n\t\t\trecovered: f.Recovered,\n\t\t}));\n\n\tconst deaths = getTotal(countries, 'deaths');\n\tconst confirmed = getTotal(countries, 'confirmed');\n\tconst recovered = getTotal(countries, 'recovered');\n\n\tconst totals = {\n\t\tdeaths,\n\t\tconfirmed,\n\t\trecovered,\n\t};\n\n\treturn [countries, totals];\n}\n\nexport function useCountries() {\n\tconst { dispatch } = useContext(StateContext);\n\n\tconst setCountries = countries => {\n\t\tdispatch({\n\t\t\ttype: 'SET_COUNTRIES',\n\t\t\tpayload: {\n\t\t\t\tcountries,\n\t\t\t},\n\t\t});\n\t};\n\n\tconst setTotals = totals => {\n\t\tdispatch({\n\t\t\ttype: 'SET_TOTALS',\n\t\t\tpayload: {\n\t\t\t\ttotals,\n\t\t\t},\n\t\t});\n\t};\n\n\treturn {\n\t\tsetCountries,\n\t\tsetTotals,\n\t};\n}\n\nexport function useSearch() {\n\tconst { dispatch, state } = useContext(StateContext);\n\n\tconst setSearch = search => {\n\t\tdispatch({\n\t\t\ttype: 'SET_SEARCH',\n\t\t\tpayload: {\n\t\t\t\tsearch,\n\t\t\t},\n\t\t});\n\t};\n\n\treturn {\n\t\tsetSearch,\n\t\tsearch: state.search,\n\t};\n}\n","import React, { useEffect, useState } from 'react';\nimport { flag } from 'country-emoji';\n//import Dropdown from 'react-dropdown';\nimport { navigateTo } from \"../../helpers\"\nimport 'react-dropdown/style.css';\nimport {\n\tStyledWrapper,\n\tStyledCard,\n\tStyledCardName,\n\tStyledInformation,\n\tStyledTotalsWrapper,\n\tStyledTotalCard,\n\tStyledFilters,\n} from './styled';\nimport { getData, useSearch } from '../../hooks';\n\nconst FILTERS = {\n\tALL: { value: 'all', label: 'all' },\n\tWITH_DEATHS: { value: 'with-deaths', label: 'countries with deaths' },\n};\n\nconst useCoronaVirusData = () => {\n\tconst { search } = useSearch();\n\tconst [fetchedCountries, setFetchedCountries] = useState([]);\n\tconst [fetchedTotals, setFetchedTotals] = useState({});\n\n\tuseEffect(() => {\n\t\tgetData(search).then(([countries, totals]) => {\n\t\t\tsetFetchedCountries(countries);\n\t\t\tsetFetchedTotals(totals);\n\t\t});\n\t}, [search]);\n\n\treturn [fetchedCountries, fetchedTotals];\n};\n\nconst onCardClick = (id) => () => {\n  navigateTo(`country/${id}`);\n}\nconst Content = () => {\n\tconst [countries, totals] = useCoronaVirusData();\n\tconst { search } = useSearch();\n\n\treturn (\n\t\t<div>\n\t\t\t<StyledTotalsWrapper>\n\t\t\t\t<StyledTotalCard backgroundColor=\"#ffff00b3\">\n\t\t\t\t\t<h1>Total Cases</h1>\n\t\t\t\t\t<h1>🤒</h1>\n\t\t\t\t\t<h1>{totals.confirmed}</h1>\n\t\t\t\t</StyledTotalCard>\n\t\t\t\t<StyledTotalCard backgroundColor=\"#94ff6a\">\n\t\t\t\t\t<h1>Recovered</h1>\n\t\t\t\t\t<h1>😃</h1>\n\t\t\t\t\t<h1>{totals.recovered}</h1>\n\t\t\t\t</StyledTotalCard>\n\t\t\t\t<StyledTotalCard backgroundColor=\"red\">\n\t\t\t\t\t<h1>Deaths</h1>\n\t\t\t\t\t<h1>💀</h1>\n\t\t\t\t\t<h1>{totals.deaths}</h1>\n\t\t\t\t</StyledTotalCard>\n\t\t\t</StyledTotalsWrapper>\n\t\t\t<StyledWrapper>\n\t\t\t\t{search.length ===0  &&\n\t\t\t\t\tcountries.map(({ name, confirmed, deaths, recovered }) => (\n\t\t\t\t\t\t<StyledCard onClick={onCardClick(name)}>\n\t\t\t\t\t\t\t<StyledCardName>\n\t\t\t\t\t\t\t\t{flag(name)} {name}\n\t\t\t\t\t\t\t</StyledCardName>\n\t\t\t\t\t\t\t<StyledInformation>{'🤒' + `${confirmed}`}</StyledInformation>\n\t\t\t\t\t\t\t<StyledInformation>{'💀' + `${deaths}`}</StyledInformation>\n\t\t\t\t\t\t\t<StyledInformation>{'😃' + `${recovered}`}</StyledInformation>\n\t\t\t\t\t\t</StyledCard>\n\t\t\t\t\t))}\n\t\t\t</StyledWrapper>\n\t\t</div>\n\t);\n};\n\nexport default Content;\n","import { navigate } from \"@reach/router\"\n\nexport const navigateTo = path => {\n  const BASE_PATH = 'corona-virus-react';\n  navigate(`${BASE_PATH}/${path}`)\n}\n","import styled from 'styled-components';\n\nexport const StyledTitle = styled.h1``;\n\nexport const StyledNav = styled.div`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tbackground-color: #da0063;\n  justify-content: center;\n`;\n\nexport const StyledNavItem = styled.div`\n\tcolor: white;\n\tpadding: 5px;\n\twidth: 300px;\n\ttext-align: center;\n\tcolor: white;\n`;\n","import styled from 'styled-components';\n\nexport const StyledInput = styled.input`\n\twidth: 30%;\n\tborder: 2px solid black;\n\theight: 30px;\n\tfont-size: 1rem;\n  padding: 10px;\n\tborder-radius: 5px;\n`;\n","import React from 'react';\nimport { useSearch } from '../../hooks';\nimport { StyledInput } from './styled';\n\nconst Search = () => {\n\tconst { setSearch } = useSearch();\n\n\tconst search = element => setSearch(element.target.value);\n\n\treturn (\n\t\t<div>\n\t\t\t<StyledInput type=\"search\" placeholder=\"country name\" onChange={search} />\n\t\t</div>\n\t);\n};\n\nexport default Search;\n","import React from 'react';\nimport { StyledTitle, StyledNav, StyledNavItem } from './styled';\nimport Search from '../search';\n\n//<StyledNav>\n//<StyledNavItem>home</StyledNavItem>\n//<StyledNavItem>taking care</StyledNavItem>\n//<StyledNavItem>statistics</StyledNavItem>\n//</StyledNav>\nconst Header = () => {\n\treturn (\n\t\t<div>\n\t\t\t<StyledTitle> Corona Virus Statistics </StyledTitle>\n\t\t\t<div>\n\t\t\t\t<Search />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Header;\n","import React from 'react';\nimport { StyledContent, StyledHeader } from './styled';\nimport Content from '../content';\nimport Header from '../header';\n\nconst Index = () => {\n\treturn (\n\t\t<div>\n\t\t\t<StyledHeader>\n\t\t\t\t<Header />\n\t\t\t</StyledHeader>\n\t\t\t<StyledContent>\n\t\t\t\t<Content />\n\t\t\t</StyledContent>\n\t\t</div>\n\t);\n};\n\nexport default Index;\n","import React from 'react';\n\nconst Country = ({ countryId }) => <div> {countryId} </div>;\n\nexport default Country;\n","import React from 'react';\nimport './App.css';\nimport Layout from './components/layout/index.jsx';\nimport Country from './components/country/index.jsx';\nimport { StateProvider } from './context';\nimport { Router} from '@reach/router';\n\nfunction App() {\n\treturn (\n\t\t<StateProvider>\n\t\t\t<Router basepath=\"corona-virus-react\">\n\t\t\t\t<Layout path=\"/\" />\n\t\t\t\t<Country path=\"country/:countryId\" />\n\t\t\t</Router>\n\t\t</StateProvider>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}