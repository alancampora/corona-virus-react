{"version":3,"sources":["logo.svg","components/layout/styled.js","components/content/styled.js","components/content/index.jsx","components/layout/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","StyledHeader","styled","h1","StyledContent","div","StyledWrapper","StyledCard","StyledCardName","h2","StyledInformation","p","StyledTotalsWrapper","StyledTotalCard","props","backgroundColor","StyledFilters","getTotal","data","prop","reduce","acum","country","FILTERS","ALL","value","label","WITH_DEATHS","Content","useState","countries","setCountries","totals","setTotals","useLayoutEffect","a","fetch","json","countriesData","formattedData","features","map","f","attributes","name","Country_Region","coordinates","Lat","Long_","confirmed","Confirmed","deaths","Deaths","recovered","Recovered","totalDeaths","totalConfirmed","totalRecovered","getData","useGetCoronaVirusData","filter","setFilter","options","onChange","selectedFilter","flag","Index","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d0cb6c4e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import styled from 'styled-components';\n\nexport const StyledHeader = styled.h1`\n  text-align: center;\n`;\nexport const StyledContent = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 60rem;\n`;\n","import styled from 'styled-components';\n\nexport const StyledWrapper = styled.div` \n    display: flex;\n    flex-wrap: wrap;\n    -webkit-box-pack: center;\n    justify-content: center;\n`\n\nexport const StyledCard = styled.div`\n    width: 25%;\n    padding: 10px;\n    margin: 10px;\n    background-color:#edcaca4d;\n`\n\nexport const StyledCardName = styled.h2`\n  text-align: center;\n`\n\nexport const StyledInformation = styled.p`\n  text-align: center;\n  font-size: 1.5em;\n`\n\nexport const StyledTotalsWrapper = styled.p`\n    display: flex;\n    flex-wrap: wrap;\n    -webkit-box-pack: center;\n    justify-content: center;\n`\n\nexport const StyledTotalCard = styled.div`\n    border-radius: 10px;\n    background: ${props => props.backgroundColor};\n    text-align: center;\n    padding: 10px;\n    margin: 10px;\n    width: 25%;\n    word-break: break-word;\n`;\n\n\nexport const StyledFilters = styled.div`\n  padding: 1rem;\n  max-width: 250px;\n`\n","import React, {useLayoutEffect, useState} from 'react';\nimport {flag} from 'country-emoji';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport {\n    StyledWrapper,\n    StyledCard,\n    StyledCardName,\n    StyledInformation,\n    StyledTotalsWrapper,\n    StyledTotalCard,\n    StyledFilters,\n} from './styled';\n\n\nfunction getTotal(data, prop) {\n    return data.reduce((acum, country) => {\n        acum += country[prop];\n        return acum;\n    }, 0);\n}\n\nfunction useGetCoronaVirusData() {\n    // get corona virus data from api\n    // transform data\n    // get totals\n\n    const [countries, setCountries] = useState([]);\n    const [totals, setTotals] = useState({});\n\n    useLayoutEffect(() => {\n\n        const getData = async () => {\n            const data = await fetch(\n                'https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/ncov_cases/FeatureServer/2/query?f=json&where=Confirmed%20%3E%200&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=Confirmed%20desc&resultOffset=0&resultRecordCount=200&cacheHint=true');\n            const countriesData = await data.json();\n            const formattedData = countriesData.features.map(f => f.attributes).map(f => ({\n                name: f.Country_Region,\n                coordinates: [f.Lat, f.Long_],\n                confirmed: f.Confirmed,\n                deaths: f.Deaths,\n                recovered: f.Recovered,\n            }));\n\n            const totalDeaths = getTotal(formattedData, 'deaths');\n            const totalConfirmed = getTotal(formattedData, 'confirmed');\n            const totalRecovered = getTotal(formattedData, 'recovered');\n\n            setTotals({\n                deaths: totalDeaths,\n                confirmed: totalConfirmed,\n                recovered: totalRecovered,\n            })\n            setCountries(formattedData);\n        };\n\n        getData();\n    }, []);\n\n    return [countries, totals];\n};\n\nconst FILTERS = {\n    ALL: {value: 'all', label: 'all'},\n    WITH_DEATHS: {value: 'with-deaths', label: 'countries with deaths'},\n};\nconst Content = () => {\n    const [countries, totals] = useGetCoronaVirusData();\n    const [filter, setFilter] = useState(FILTERS.ALL);\n\n    return (\n        <div>\n            <StyledFilters>\n                <Dropdown\n                    options={[FILTERS.ALL, FILTERS.WITH_DEATHS]}\n                    value={FILTERS.ALL}\n                    onChange={selectedFilter => setFilter(selectedFilter)}\n                />\n            </StyledFilters>\n            <StyledTotalsWrapper>\n                <StyledTotalCard backgroundColor=\"#ffff00b3\">\n                    <h1>Total Cases</h1>\n                    <h1>ðŸ¤’</h1>\n                    <h1>{totals.confirmed}</h1>\n                </StyledTotalCard>\n                <StyledTotalCard backgroundColor=\"#94ff6a\">\n                    <h1>Recovered</h1>\n                    <h1>ðŸ˜ƒ</h1>\n                    <h1>{totals.recovered}</h1>\n                </StyledTotalCard>\n                <StyledTotalCard backgroundColor=\"red\">\n                    <h1>Deaths</h1>\n                    <h1>ðŸ’€</h1>\n                    <h1>{totals.deaths}</h1>\n                </StyledTotalCard>\n            </StyledTotalsWrapper>\n            <StyledWrapper>\n                {\n                    countries\n                        .filter(({deaths}) => filter.value === FILTERS.WITH_DEATHS.value ? deaths > 0 : true)\n                        .map(({name, confirmed, deaths, recovered}) => (\n                            <StyledCard>\n                                <StyledCardName>{flag(name)} {name}</StyledCardName>\n                                <StyledInformation>{\"ðŸ¤’\" + `${confirmed}`}</StyledInformation>\n                                <StyledInformation>{\"ðŸ’€\" + `${deaths}`}</StyledInformation>\n                                <StyledInformation>{\"ðŸ˜ƒ\" + `${recovered}`}</StyledInformation>\n                            </StyledCard>\n\n                        ))\n                }\n            </StyledWrapper>\n        </div>\n\n    );\n};\n\nexport default Content;","import React from 'react';\nimport {StyledContent, StyledHeader} from \"./styled\";\nimport Content from \"../content\";\n\nconst Index = () => {\n    return (\n        <div>\n            <StyledHeader>CORONA VIRUS STATISTICS</StyledHeader>\n            <StyledContent>\n               <Content/>\n            </StyledContent>\n        </div>\n    );\n};\n\nexport default Index;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Layout from './components/layout/index.jsx'\n\nfunction App() {\n  return (\n    <Layout></Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}